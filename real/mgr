#!/bin/bash
# Copyright (c) 2024 Discover Financial Services

#
# Use this script to train tesseract.
#
set -e

if command -v gmake >/dev/null 2>&1; then
    MAKE_CMD="gmake"
else
    MAKE_CMD="make"
fi

export OCR_FONT="${OCR_FONT:=micr_e13b}"
export OCR_LOG_LEVEL="${OCR_LOG_LEVEL:=info}"
export PSM="${PSM:=13}"

SCRIPT_DIR="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
# Directory paths
TRAIN_DIR="${TRAIN_DIR:-$HOME/.fin-ocr/train}"
TESSTRAIN_DIR=${TRAIN_DIR}/tesstrain
TESSTRAIN_DATA_DIR=${TESSTRAIN_DIR}/data
TESSTRAIN_FONT_DIR=${TESSTRAIN_DATA_DIR}/${OCR_FONT}
LANGDATA_DIR=${TESSTRAIN_DATA_DIR}/langdata
GROUND_TRUTH_DIR=${TESSTRAIN_DATA_DIR}/${OCR_FONT}-ground-truth
RESULTS_DIR=$TRAIN_DIR/results/`date "+%Y-%m-%d"`
# File paths
GROUND_TRUTH_COUNT_FILE=${GROUND_TRUTH_DIR}/count
REF_IMAGE_FILE=${SCRIPT_DIR}/data/micr_ref.tif
REF_GT_FILE=${SCRIPT_DIR}/data/micr_ref.gt.txt
TD_FILE=${OCR_FONT}.traineddata
TD_PATH=${TRAIN_DIR}/${TD_FILE}
LOG_FILE=${TRAIN_DIR}/train.log

# Optional
START_MODEL="${TRAIN_DIR}/models/micr_e13b.traineddata"

function usage() {
   if [ $# -gt 0 ]; then
      echo "ERROR: $*"
   fi
   echo "Usage: mgr train <start-check-num> <num-checks>"
   exit 1
}

function fatal() {
   echo "FATAL: $*"
   exit 1
}

function main() {
   if [ $# -eq 0 ]; then
      usage
   fi
   CMD=$1
   shift
   if [ "$CMD" = "train" ]; then
      train $*
   else
      usage "Invalid command: $CMD"
   fi
}

function train {
    if [ $# -ne 2 ]; then
        usage "Invalid number of arguments for the 'train' command"
    fi
    START=$1
    COUNT=$2
    command -v ocr >/dev/null 2>&1 || { echo >&2 "The 'ocr' command must be installed. See https://github.com/discoverfinancial/fin-ocr-cli?tab=readme-ov-file#installation-steps"; exit 1; }

    mkdir -p $TRAIN_DIR
    cd $TRAIN_DIR
    runTrain "$START:$COUNT" 2>&1 | tee ${LOG_FILE}
    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
      echo ""
      echo "The runTrain command failed, see $LOG_FILE for details."
      exit 2
    fi
    #
    # save the trained data by date
    #
    saveTrainedData
}

function runTrain {
    if [ $# -ne 1 ]; then
        usage "Invalid number of arguments for the 'runTrain' command"
    fi
    SC=$1
    #
    # Clone the tesstrain repo locally
    #
    if [ ! -d $TESSTRAIN_DIR ]; then
       command -v git >/dev/null 2>&1 || { echo >&2 "The 'git' command must be installed."; exit 1; }
       REPO=https://github.com/tesseract-ocr/tesstrain.git
       git clone $REPO
       if [ ! -d $TESSTRAIN_DIR ]; then
           fatal "Failed to clone $REPO"
       fi
    else
       echo "The tesstrain directory was found at $TESSTRAIN_DIR"
    fi
    #
    # Gen the ground truth if necessary
    #
    if [ -f $GROUND_TRUTH_COUNT_FILE ]; then
       PSC="`cat $GROUND_TRUTH_COUNT_FILE`"
       if [ "$SC" != "$PSC" ]; then
          # There was a ground truth count file found, but a different number
          rm -rf $GROUND_TRUTH_DIR
       fi
    else
       rm -rf $GROUND_TRUTH_DIR
    fi
    if [ ! -d $GROUND_TRUTH_DIR ]; then
        mkdir -p $GROUND_TRUTH_DIR
        export GROUND_TRUTH_DIR=$GROUND_TRUTH_DIR
        echo "GROUND_TRUTH_DIR: $GROUND_TRUTH_DIR"
        echo "ocr being called with: ocr check scan $SC"
        ocr check scan $SC
        echo "$SC" > ${GROUND_TRUTH_COUNT_FILE}
    else
        echo "Found ground truth at $GROUND_TRUTH_DIR"
    fi
    #
    # Now do tesstrain stuff
    #
    cd $TESSTRAIN_DIR
    #
    # Download the langdata files as required by tesstrain
    #
    if [ ! -d $LANGDATA_DIR ]; then
        echo "Downloading tesseract-langdata"
        $MAKE_CMD tesseract-langdata
    else
        echo "The langdata directory was found at $LANGDATA_DIR"
    fi
    #
    # Perform training
    #
    if [[ -z "$START_MODEL" ]]; then
       echo "Begin training from scratch"
       $MAKE_CMD training MODEL_NAME=${OCR_FONT} PSM=${PSM} EPOCHS=2 TARGET_ERROR_RATE=-1  
       
    elif [[ -n "$START_MODEL" ]]; then
       echo "Begin training from $START_MODEL"
       $MAKE_CMD training MODEL_NAME=${OCR_FONT} PSM=${PSM} EPOCHS=2 TARGET_ERROR_RATE=-1  START_MODEL="$START_MODEL"
    fi
    if [ ! -f $TD_PATH ]; then
         echo "Training failed; file $TD_PATH was not found"
         exit 1
    fi
}

function saveTrainedData {
    mkdir -p $RESULTS_DIR

    if [ -f $RESULTS_DIR/$TD_FILE ]; then
        echo "Trained data $TD_FILE already exists in $RESULTS_DIR."
        read -p "Do you want to overwrite it? (y/n): " yn
        case $yn in
            [Yy]* )
                echo "Overwriting the existing trained data."
                ;;
            [Nn]* )
                version=1
                while [ -f $RESULTS_DIR/${OCR_FONT}_v${version}.traineddata ]; do
                    version=$((version+1))
                done
                TD_FILE=${OCR_FONT}_v${version}.traineddata
                echo "Saving trained data as $TD_FILE to avoid conflict."
                ;;
            * ) echo "Please answer y or n."; exit 1;;
        esac
    fi

    cp $TESSTRAIN_DATA_DIR/$TD_FILE $RESULTS_DIR/$TD_FILE
    mv train.log $RESULTS_DIR
    echo "Stored traineddata at $RESULTS_DIR/$TD_FILE"
    echo "Stored logs at $RESULTS_DIR/train.log"
}

main $*
